// Generated by CoffeeScript 1.10.0
(function() {
  var riot = require('riot')
  var rocketmade = require('../bower_components/rocketmade.js/rocketmade.js')
  var slice = [].slice;

  this.rockauth = (function() {
    function rockauth() {}

    riot.observable(rockauth);

    rockauth.data = rocketmade.data;

    rockauth.url = function(value) {
      if (value) {
        this.url.value = value.replace(/\/$/, '');
      }
      return this.url.value;
    };

    rockauth.client_id = function(value) {
      if (value) {
        this.client_id.value = value;
      }
      return this.client_id.value;
    };

    rockauth.client_secret = function(value) {
      if (value) {
        this.client_secret.value = value;
      }
      return this.client_secret.value;
    };

    rockauth.authentication = function(json) {
      this.session(json.authentications[0]);
      return this.user(json.users[0]);
    };

    rockauth.session = function(json) {
      if (json) {
        this.token(json.token);
        this.data.set('rockauth:session', json);
      }
      return this.data.get('rockauth:session');
    };

    rockauth.user = function(value) {
      if (value) {
        this.data.set('rockauth:user', value);
      }
      return this.data.get('rockauth:user');
    };

    rockauth.token = function(value) {
      if (value) {
        this.data.set('rockauth:token', value);
      }
      return this.data.get('rockauth:token');
    };

    rockauth.config = function(json) {
      rockauth.url(json.url);
      rockauth.client_id(json.client_id);
      rockauth.client_secret(json.client_secret);
      return json;
    };

    rockauth.is_authenticated = function() {
      return this.token() !== null && this.token() !== void 0;
    };

    rockauth.logout = function() {
      this.authenticated_request("DELETE", "/authentications").then(function(response) {
        return console.log("DELETE /authentications endpoint returned success");
      })["catch"](function(response) {
        return console.log("DELETE /authentications endpoint returned failure");
      });
      return this.data.set('rockauth:token', null);
    };

    rockauth.authenticated_request = function(method, endpoint, data) {
      return rocketmade.http.request(method, "" + (this.url()) + endpoint, data, {
        headers: {
          Authorization: "bearer " + (this.token())
        }
      });
    };

    rockauth.forgot_password = function(username) {
      return new rocketmade.promise((function(_this) {
        return function(pass, fail) {
          return rocketmade.http.post((_this.url()) + "/passwords/forgot", {
            user: {
              username: username
            }
          }).then(function(response) {
            return pass(response);
          })["catch"](function(response) {
            return fail(response);
          });
        };
      })(this));
    };

    rockauth.authenticate_with_password = function(opts) {
      if (opts == null) {
        opts = {};
      }
      return new rocketmade.promise((function(_this) {
        return function(pass, fail) {
          return rocketmade.http.post((_this.url()) + "/authentications", {
            authentication: {
              auth_type: 'password',
              client_id: _this.client_id(),
              client_secret: _this.client_secret(),
              username: opts.username,
              password: opts.password
            }
          }).then(function(response) {
            rockauth.authentication(response.json());
            return pass(response);
          })["catch"](function(response) {
            return fail(response);
          });
        };
      })(this));
    };

    rockauth.reset_password = function(opts) {
      if (opts == null) {
        opts = {};
      }
      return new rocketmade.promise((function(_this) {
        return function(pass, fail) {
          return rocketmade.http.post((_this.url()) + "/passwords/reset", {
            user: {
              password_reset_token: opts.reset_token,
              password: opts.new_password
            }
          }).then(function(response) {
            return pass(response);
          })["catch"](function(response) {
            return fail(response);
          });
        };
      })(this));
    };

    rockauth.sideload = new ((function() {
      function _Class() {}

      _Class.prototype.load = function(json) {
        var key, value;
        for (key in json) {
          value = json[key];
          this.set.apply(this, [key].concat(slice.call(value)));
        }
        return this;
      };

      _Class.prototype.set = function() {
        var i, key, len, object, objects, results;
        key = arguments[0], objects = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        results = [];
        for (i = 0, len = objects.length; i < len; i++) {
          object = objects[i];
          results.push((this[key] != null ? this[key] : this[key] = {})[object.id] = object);
        }
        return results;
      };

      return _Class;

    })());

    return rockauth;

  })();

}).call(this);
